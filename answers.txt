Name:
UCLA ID:

Collaborators:

-------------------------------------------------------------------------------

Response to Exercise 1:

The name of the scheduling algorithm is:
This is cooperative scheduling. If you look at schedos-1.c, it calls sys_yield()after each character it prints. The scheduler then use a round-robin scheduling algorithm to pick the next available (runnable) process to run. Hence the output of "123412341234...".

(Exercise 2 is a coding exercise)


Response to Exercise 3:

Average turnaround time for scheduling_algorithm 0:
schedos-1: 320*4 - 3
schedos-2: 320*4 - 2
schedos-3: 320*4 - 1
schedos-4: 320*4
-----------------------
average turnaround time: 1278.5 ms

Average turnaround time for scheduling_algorithm 1:
schedos-1: 320
schedos-2: 320*2
schedos-3: 320*3
schedos-4: 320*4
-----------------------
average turnaround time: 800 ms

Average wait time for scheduling_algorithm 0:
schedos-1: 0
schedos-2: 1
schedos-3: 2
schedos-4: 3
-----------------------
average wait time: 1.5 ms

Average wait time for scheduling_algorithm 1:
schedos-1: 0
schedos-2: 320
schedos-3: 320*2
schedos-4: 320*3
-----------------------
average wait time: 480 ms

Exercise 4:

Did you complete Exercise 4A, Exercise 4B, or both for extra credit?
I completed 4A
I also tried 4B, and it's partially working.

Exercise 5:
The first out of order sequence was "12341231234", that means the first interrupt happens at the 4th process and skipping over it's printing.

(Exercise 6 is a coding exercise)


Anything else you'd like us to know:



Extra credit exercises:

Exercise 7:
I successfully implemented the lottery scheduling. While the random number I used from read_cycle_counter is a psudo-random number, the output still behaves similar to a true random number.
Threads can use the system call sys_lottery() to set the number of lottery tickets it has. The greater the number, the more likely that the thread gets picked to run.

Exercise 8:
I first tried using the atomic_swap function directly, but it didn't quite work. So I decided to implement a print system call instead. This mechanism works because at any given time, there can only be "one kernel" running. Thus, any code executed from within the kernel is guaranteed to guard against race condition. Thus, I implemented a sys_print system call to which the threads call to print characters. Kernel then handle the increment of cursorpos itself and therefore prevent race conditions.


